{"version":3,"sources":["App.js","index.js"],"names":["App","useState","text","setText","isLoading","setIsLoading","image","setImage","progress","setProgress","className","style","height","type","onChange","e","URL","createObjectURL","target","files","value","onClick","Tesseract","recognize","logger","m","console","log","status","parseInt","then","data","rootElement","document","getElementById","createRoot","render"],"mappings":"6LAIe,SAASA,IACtB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAgCN,mBAAS,GAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KAiBA,OACE,qBAAKC,UAAU,YAAYC,MAAO,CAAEC,OAAQ,SAA5C,SACE,iCACIR,GAAa,0DAGbA,IAAcF,GACd,qCACE,uBACEW,KAAK,OACLC,SAAU,SAACC,GAAD,OAAOR,EAASS,IAAIC,gBAAgBF,EAAEG,OAAOC,MAAM,QAE/D,uBAAON,KAAK,SAASO,MAAM,UAAUC,QA3B3B,WAClBhB,GAAa,GACbiB,IAAUC,UAAUjB,EAAO,MAAO,CAChCkB,OAAQ,SAACC,GACPC,QAAQC,IAAIF,GACK,qBAAbA,EAAEG,QACJnB,EAAYoB,SAAsB,IAAbJ,EAAEjB,cAG1BsB,MAAK,YAAyB,IAAd5B,EAAa,EAArB6B,KAAQ7B,KACjBwB,QAAQC,IAAIzB,GACZG,GAAa,YAqBVD,GACC,mCACE,gDAAmBI,EAAnB,UAKFJ,GAAaF,GACb,0BACEkB,MAAOlB,EACPY,SAAU,SAACC,GAAD,OAAOZ,EAAQY,EAAEG,OAAOE,eC/C9C,IAAMY,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAD,UACE,cAACpC,EAAD,S","file":"static/js/main.def4d1e5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./styles.css\";\nimport Tesseract from \"tesseract.js\";\n\nexport default function App() {\n  const [text, setText] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [image, setImage] = useState(\"\");\n  const [progress, setProgress] = useState(0);\n\n  const handleClick = () => {\n    setIsLoading(true);\n    Tesseract.recognize(image, \"eng\", {\n      logger: (m) => {\n        console.log(m);\n        if (m.status === \"recognizing text\") {\n          setProgress(parseInt(m.progress * 100));\n        }\n      }\n    }).then(({ data: { text } }) => {\n      console.log(text);\n      setIsLoading(false);\n    });\n  };\n\n  return (\n    <div className=\"container\" style={{ height: \"100vh\" }}>\n      <div>\n        {!isLoading && <h2>Image to text converter</h2>}\n\n        {/* form */}\n        {!isLoading && !text && (\n          <>\n            <input\n              type=\"file\"\n              onChange={(e) => setImage(URL.createObjectURL(e.target.files[0]))}\n            />\n            <input type=\"button\" value=\"Convert\" onClick={handleClick} />\n          </>\n        )}\n\n        {/* progress bar */}\n        {isLoading && (\n          <>\n            <p>Converting :-- {progress}%</p>\n          </>\n        )}\n\n        {/* text area */}\n        {!isLoading && text && (\n          <textarea\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n          ></textarea>\n        )}\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}